# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file contains all available configuration options
# with their documentation

# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: false
  skip-dirs:
     - bin$
     - docs$
     - playbooks$
     - tools$
     - web$

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor


# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true


# all available settings of specific linters
linters-settings:

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    # exclude: /path/to/file.txt

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 4
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 5

  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    enabled-checks:
      - appendAssign
      - appendCombine
      - assignOp
      - captLocal
      - caseOrder
      - commentedOutCode
      - commentedOutImport
      - defaultCaseOrder
      - dupArg
      - dupBranchBody
      - dupCase
      - dupSubExpr
      - elseif
      - equalFold
      - flagDeref
      - ifElseChain
      - regexpMust
      - singleCaseSwitch
      - sloppyLen
      - switchTrue
      - typeAssertChain
      - typeSwitchVar
      - underef
      - unlambda
      - unslice

    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    # disabled-checks:
    #   - regexpMust

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    # enabled-tags:
    #   - performance

    settings: # settings passed to gocritic
      captLocal:
        paramsOnly: false

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  #goimports:
  #  # put imports beginning with prefix after 3rd-party packages;
  #  # it's a comma-separated list of prefixes
  #  local-prefixes: opendev.org/airship/airshipui

  govet:
    # report about shadowed variables
    check-shadowing: true

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    # ignore-words:
    #   - someword

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 10

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdirectory of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

linters:
  disable-all: true
  enable:
    - errcheck             # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - goconst              # Finds repeated strings that could be replaced by a constant
    - gocritic             # The most opinionated Go source code linter
    - gocyclo              # Computes and checks the cyclomatic complexity of functions
    - gofmt                # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - goimports            # Goimports does everything that gofmt does. Additionally it checks unused imports
    - gosec                # Inspects source code for security problems
    - govet                # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign          # Detects when assignments to existing variables are not used
    - interfacer           # Linter that suggests narrower interface types
    - lll                  # Reports long lines
    - misspell             # Finds commonly misspelled English words in comments
    - nakedret             # Finds naked returns in functions greater than a specified function length
    - prealloc             # Finds slice declarations that could potentially be preallocated
    - scopelint            # Scopelint checks for unpinned variables in go programs
    - unconvert            # Remove unnecessary type conversions
    - unparam              # Reports unused function parameters
    - unused               # Checks Go code for unused constants, variables, functions and types
    - varcheck             # Finds unused global variables and constants
    - whitespace           # Tool for detection of leading and trailing whitespace NOTE(howell): This linter does _not_ check for trailing whitespace in multiline strings